#!/usr/bin/env python

import os
import subprocess
import math
import sys
import matplotlib.pyplot as plt
import numpy as np
import argparse

micros_per_s = 1000000
time_series_types = ['times','min', 'max', 'mean', 'rms', 'n']

parser = argparse.ArgumentParser()
parser.add_argument('-l',help='[REQUIRED] the location of the trend data being'\
     +'used')
parser.add_argument('-f', help='[REQUIRED] specifies whether to use the'\
    +'of best fit (with \'lobf\') or the mean of the trend (with \'constant\'' \
    +') to find the residual. the former might be used for a cesium clock, '\
    +'and the latter for the GPS clock.')
parser.add_argument('-i', action='store_true', help='Include outliers. use th'\
    +'is flag if you want this program to ignore anomalously large or small d'\
    +'ata and plot all points')
args = vars(parser.parse_args())
location = args['l']
include_outliers = args['i']

def make_time_series():
    array_dictionary = {}
    for i in time_series_types:
        array_dictionary[i] = []
    for line in sys.stdin:
        values = [float(x) for x in line.replace('\n','').split('\t')[:5]]
        for i in range(len(values)):
            array_dictionary[time_series_types[i]].append(values[i])
    return array_dictionary

def tconvert(tstr=""):
    return os.popen("lalapps_tconvert " + str(tstr)).read()

def make_plot(statistics_dictionary):
    stat = statistics_dictionary
    if args['f'] == 'lobf':
        fitted_function_description = 'line of best fit'
        #creates array with slope and y-intercept of line of best fit of the mean
        lobf_array = np.polyfit(stat['times'], stat['mean'], 1)
        #dimensionless quantity that characterizes drift
        notable_quantity = 'Drift coefficient'
        notable_quantity_value = lobf_array[0]/micros_per_s
        fitted_function = np.poly1d(lobf_array)(stat['times'])
        #creates array with the difference between line of best fit and mean value
        tmp = [lobf_array[0] * i for i in stat['times']]
        tmp += lobf_array[1]
        tmp -= stat['mean']
        tmp = [-1*i for i in tmp]
        mean_dif = tmp
        tmp = [lobf_array[0] * i for i in stat['times']]
        tmp += lobf_array[1]
        tmp -= stat['max']
        tmp = [-1*i for i in tmp]
        max_dif = tmp
        tmp = [lobf_array[0] * i for i in stat['times']]
        tmp += lobf_array[1]
        tmp -= stat['min']
        tmp = [-1*i for i in tmp]
        min_dif = tmp
    elif args['f'] == 'constant':
        fitted_function_description = 'average'
        notable_quantity = 'Average value'
        average_value = sum(stat['mean'])/float(len(stat['mean']))
        notable_quantity_value = average_value
        fitted_function = np.poly1d(average_value)(stat['mean'])
        mean_dif = np.subtract(stat['mean'],fitted_function)
        max_dif = np.subtract(stat['max'],fitted_function)
        min_dif = np.subtract(stat['min'],fitted_function)
    else:
        print('You must specify either "lobf" or "constant" with "-f" flag')
        exit()
    ordered_max_time, ordered_max_trend = zip(*sorted(zip(stat['times']\
        ,stat['max'])))
    ordered_min_time, ordered_min_trend = zip(*sorted(zip(stat['times']\
        ,stat['min'])))
    ordered_mean_time, ordered_mean_trend = zip(*sorted(zip(stat['times']\
        ,stat['mean'])))
    ordered_rms_time, ordered_rms_trend = zip(*sorted(zip(stat['times']\
        ,stat['rms'])))
    rms_sqaured = [i**2 for i in ordered_rms_trend]
    mean_squared = [ i**2 for i in ordered_mean_trend]
    mean_variance_array = np.subtract(rms_sqaured,mean_squared)
    mean_std_dev_array = [i**0.5 for i in mean_variance_array]
    std_dev_max_dif = np.std(max_dif)
    std_dev_min_dif = np.std(min_dif)
    std_dev_mean_dif = np.std(mean_dif)
    std_dev_residual = np.std(mean_dif)
    print 'making plots'
    fig = plt.figure(figsize=(13,18))
    plt.suptitle('Characterization of diagnostic timing system 1PPS signal, '\
                 + str(location), fontsize = 20)
    plt.subplots_adjust(top=0.88888888, bottom=0.1)
    ax1 = plt.subplot2grid((5,2),(0,0), colspan=2)
    ax1.set_title(fitted_function_description+' versus mean offset')
    ax1.plot(stat['times'], stat['mean'], 'blue', label = 'Me'\
        +'an minute trend')
    ax1.plot(stat['times'], fitted_function, '#000000', label = \
        fitted_function_description)
    ax1.fill_between(ordered_max_time, ordered_max_trend, ordered_min_trend\
        ,alpha = 0.25, label='min/max range')
    ax1.set_xlabel('GPS time')
    ax1.set_ylabel('Offset [$\mu$s]')
    ax1.text(0.01, 0.05, notable_quantity+'='+str(notable_quantity_value), \
        transform=ax1.transAxes, bbox=dict(facecolor='#99ccff',\
        boxstyle='round', alpha=0.25))
    ax1.legend(loc=1, fancybox=True, framealpha=0.5)
    ax3 = plt.subplot2grid((5,2), (2,0))
    n, bins, patches = plt.hist(mean_dif, 20, facecolor='blue')
    ax3.axvline(x=np.mean(mean_dif)+std_dev_mean_dif, linestyle='dashed')
    ax3.axvline(x=np.mean(mean_dif)-std_dev_max_dif, linestyle='dashed')
    ax3.set_xlabel('$\Delta$t [$\mu$s]')
    ax3.set_ylabel('Frequency')
    ax3.set_title('Histogram of deviations')
    ax2 = plt.subplot2grid((5,2), (1,0))
    ax2.plot(stat['times'], mean_dif, 'blue')
    ax2.set_xlabel('GPS time')
    ax2.set_title('Deviation of mean trend from '+fitted_function_description)
    ax2.set_ylabel('Deviation [$\mu$s]')
    ax4 = plt.subplot2grid((5,2),(3,0), colspan=2)
    ax4.plot(stat['times'], max_dif, 'red', label='Positive')
    ax4.plot(stat['times'], min_dif, 'green', label='Negative')
    ax4.legend(loc='best', fancybox=True, framealpha=0.5)
    ax4.set_xlabel('GPS time')
    ax4.set_ylabel('Deviation [$\mu$s]')
    ax4.set_title('Maximum deviation from the '+fitted_function_description)
    #Comment theses lines back to add a plot with only the mean trend
    ##ax5 = plt.subplot2grid((5,2),(3,1))
    ##ax5.plot(stat['mean']['times'], stat['mean']['trend'], label = '')
    ##ax5.legend(loc='best', fancybox=True, framealpha=0.5)
    ##ax5.set_xlabel('GPS time [s]')
    ##ax5.set_ylabel('Offset [$\mu$s]')
    ax6 = plt.subplot2grid((5,2), (4,0))
    n, bins, patches = plt.hist(min_dif, 20, facecolor='green')
    ax6.axvline(x=np.mean(min_dif)+std_dev_min_dif, linestyle='dashed')
    ax6.axvline(x=np.mean(min_dif)-std_dev_min_dif, linestyle='dashed')
    ax6.set_xlabel('$\Delta$t [$\mu$s]')
    ax6.set_ylabel('Frequency')
    ax6.set_title('Deviation of min from '+fitted_function_description)
    ax7 = plt.subplot2grid((5,2), (4,1))
    n, bins, patches = plt.hist(max_dif, 20, facecolor='red')
    ax7.axvline(x=np.mean(max_dif)+std_dev_max_dif, linestyle='dashed')
    ax7.axvline(x=np.mean(max_dif)-std_dev_max_dif, linestyle='dashed')
    ax7.set_xlabel('$\Delta$t [$\mu$s]')
    ax7.set_ylabel('Frequency')
    ax7.set_title('Deviation of max from '+fitted_function_description)
    ax8 = plt.subplot2grid((5,2), (1,1))
    ax8.plot(ordered_mean_time, mean_std_dev_array, '#00ffff')
    ax8.set_xlabel('GPS time')
    ax8.set_ylabel('Standard deviation')
    ax8.set_title('Standard deviation')
    ax9 = plt.subplot2grid((5,2), (2,1))
    n, bins, patches = plt.hist(mean_std_dev_array, 20, facecolor='#00FFFF')
    ax9.set_title('Histogram of standard deviations')
    ax9.set_xlabel('Standard deviation')
    ax9.set_ylabel('Frequency')
    print(notable_quantity_value)
    plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1)
    plt.subplots_adjust(left=0.1, right=0.95, top=0.92, bottom=0.05)
    fig.savefig('charicterization_of_diagnostic_timing_system_from_'+tconvert(\
        str(int(stat['times'][0]))).replace(" ", "_").replace("_GMT",""\
        )+'_until_'+tconvert(str(int(stat['times'][-1]))).replace(" ",\
        "_").replace("_GMT","")+'.png', dpi=300)

def main():
    values = make_time_series()
    make_plot(values)

main()
